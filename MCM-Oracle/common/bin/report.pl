#!/usr/bin/env perl

use warnings;
use strict;

use Mx::Env;
use Mx::Config;
use Mx::Log;
use Mx::Audit;
use Mx::DBaudit;
use Mx::Report;
use Getopt::Long;

#---------#
sub usage {
#---------#
    print <<EOT

Usage: report.pl -id <report_id> [ -o <outputfile> ] [ -ps ] [ -t <normal|compressed|landscape> ] [ -pdf ] [ -p <printer1,printer2,...> ] [ -m <address1,address2,...> ] [ -s <subject> ] [ -c <command> ] [ -a ] [ -d ] [ -z ] [ -help ]

 -id <report_id>                     ID of the report to be processed.     
 -o <outputfile>                     Specify the name of the resulting outputfile.
 -ps                                 Convert the text file to postscript before printing.
 -t <normal|compressed|landscape>    Postscript mode which should be applied. Normal is the default.
 -pdf                                Convert the file further to PDF after the PostScript conversion.
 -p <printer1,..>                    A list of printers where the report must be printed.
 -m <address1,address2,...>          Mail the resulting file to the following addresses.
 -s <subject>                        Subject line of the mail.
 -c <command>                        Execute this command with the file as argument.
 -z                                  Compress the output file.
 -a                                  Append to a (possibly) existing output file.
 -d                                  Perform a dos2unix conversion on the output file.
 -help                               Display this text.

EOT
;
    exit;
}

#
# store away the commandline arguments for later reference
#
my $args = "@ARGV";

#
# process the commandline arguments
#
my ($id, $outputfile, $postscript, $mode, $pdf, $printers, $addresses, $subject, $command, $compress, $append, $dos2unix);

GetOptions(
    'id=i'      => \$id,
    'o=s'       => \$outputfile,
    'ps'        => \$postscript,
    't=s'       => \$mode,
    'pdf'       => \$pdf,
    'p=s'       => \$printers,
    'm=s',      => \$addresses,
    's=s',      => \$subject,
    'c=s'       => \$command,
    'z'         => \$compress,
    'a'         => \$append,
    'd'         => \$dos2unix,
    'help'      => \&usage,
);

#
# read the configuration files
#
my $config = Mx::Config->new();

#
# initialize logging
#
my $logger = Mx::Log->new( directory => $config->LOGDIR, keyword => 'report' );

#
# initialize auditing
#
my $audit  = Mx::Audit->new( directory => $config->AUDITDIR, keyword => 'report', logger => $logger );

$audit->start($args);

unless ( $id ) {
    $audit->end("no report id specified", 1);
}

my $db_audit = Mx::DBaudit->new( config => $config, logger => $logger );
my $db_report;
unless ( $db_report = $db_audit->retrieve_report( id => $id ) ) {
    $audit->end("no report found in the database with id $id", 1);
}

my $file = $config->retrieve('REPORTDIR') . '/' . $id . '.txt';

unless ( -f $file ) {
    $audit->end("$file does not exist or is not a regular file", 1);
}

my $report;
unless ( $report = Mx::Report->new( id => $id, file => $file, config => $config, logger => $logger ) ) {
    $audit->end("report initialisation failed", 1);
}

$outputfile ||= $config->retrieve('RUNDIR') . '/' . $id . '.txt';

my $type = 'txt';

#
# append or copy the file, generated by Murex, to the outputfile
#
if ( $append ) {
    unless ( $report->append( path => $outputfile, erase => 0 ) ) {
        $audit->end("append to $outputfile failed", 1);
    }
}
else {
    unless ( $report->make_copy( path => $outputfile, type => 'txt', erase => 0 ) ) {
        $audit->end("copy to $outputfile failed", 1);
    }
}

#
# modify the report path
#
$report->txt_path( $outputfile );

#
# remove the dos line endings if necessary
#
if ( $dos2unix ) {
    unless ( $report->dos2unix() ) {
        $audit->end("dos2unix conversion failed", 1);
    }
}

#
# conversion to PostScript
# 
if ( $postscript or $pdf ) {
    unless ( $report->to_ps( mode => $mode ) ) {
        $audit->end("conversion to PostScript failed", 1);
    }
}

#
# conversion to PDF
# 
if ( $pdf ) {
    unless ( $report->to_pdf( ) ) {
        $audit->end("conversion to PDF failed", 1);
    }
    $type = 'pdf';
}

#
# print the file
#
if ( $printers ) {
    my @printerlist = split ',', $printers;
    my $nr_printers = @printerlist;
    my $type  = ( $postscript or $pdf ) ? 'ps' : 'txt';
    my $erase = ( $type eq 'ps' ) ? 1 : 0;
    my $nr_prints =  $report->print( printers => \@printerlist, type => $type, erase => $erase );
    unless ( $nr_prints == $nr_printers ) {
        $audit->end("one or more print jobs failed", 1);
    }
}

#
# if a command was specified, execute this command with the outputfile as argument
#
if ( $command ) {
    unless ( $report->execute( command => $command ) ) {
        $audit->end("command failed", 1);
    }
}

#
# compress the outputfile if necessary
#
if ( $compress ) {
    unless ( $report->compress( type => $type, erase => 1 ) ) {
        $audit->end("file compression failed", 1);
    }
    $type = 'z' . $type;
}

#
# send the mail
#
if ( $addresses ) {
    my @addresses = split ',', $addresses;
    unless ( $report->mail( addresses => \@addresses, type => $type, subject => $subject ) ) {
        $audit->end("sending of mail failed", 1);
    }
}

$audit->end($args, 0);

